import 'vk_exceptions.dart';

abstract class ExceptionMapper {
  static VKApiException mapErrorResponseToException(int code, String message) {
    switch (code) {
      case 1:
        return VKApiUnknownException(message);
      case 2:
        return VKApiDisabledException(message);
      case 3:
        return VKApiMethodException(message);
      case 4:
        return VKApiSignatureException(message);
      case 260:
        return VKApiAccessGroupsException(message);
      case 5:
        return VKApiAuthException(message);
      case 6:
        return VKApiTooManyException(message);
      case 7:
        return VKApiPermissionException(message);
      case 8:
        return VKApiRequestException(message);
      case 9:
        return VKApiFloodException(message);
      case 10:
        return VKApiServerException(message);
      case 11:
        return VKApiEnabledInTestException(message);
      case 12:
        return VKApiCompileException(message);
      case 13:
        return VKApiRuntimeException(message);
      case 14:
        return VKApiCaptchaException(message);
      case 15:
        return VKApiAccessException(message);
      case 16:
        return VKApiAuthHttpsException(message);
      case 17:
        return VKApiAuthValidationException(message);
      case 18:
        return VKApiUserDeletedException(message);
      case 19:
        return VKApiBlockedException(message);
      case 20:
        return VKApiMethodPermissionException(message);
      case 21:
        return VKApiMethodAdsException(message);
      case 22:
        return VKApiUploadException(message);
      case 23:
        return VKApiMethodDisabledException(message);
      case 24:
        return VKApiNeedConfirmationException(message);
      case 25:
        return VKApiNeedTokenConfirmationException(message);
      case 27:
        return VKApiGroupAuthException(message);
      case 28:
        return VKApiAppAuthException(message);
      case 29:
        return VKApiRateLimitException(message);
      case 30:
        return VKApiPrivateProfileException(message);
      case 1310:
        return VKApiCommunitiesCatalogDisabledException(message);
      case 1311:
        return VKApiCommunitiesCategoriesDisabledException(message);
      case 800:
        return VKApiVideoAlreadyAddedException(message);
      case 801:
        return VKApiVideoCommentsClosedException(message);
      case 300:
        return VKApiAlbumFullException(message);
      case 302:
        return VKApiAlbumsLimitException(message);
      case 1600:
        return VKApiStoryExpiredException(message);
      case 1602:
        return VKApiStoryIncorrectReplyPrivacyException(message);
      case 1105:
        return VKApiAuthFloodErrorException(message);
      case 600:
        return VKApiAdsPermissionException(message);
      case 1112:
        return VKApiAuthDelayException(message);
      case 601:
        return VKApiWeightedFloodException(message);
      case 602:
        return VKApiAdsPartialSuccessException(message);
      case 603:
        return VKApiAdsSpecificException(message);
      case 100:
        return VKApiParamException(message);
      case 101:
        return VKApiParamApiIdException(message);
      case 103:
        return VKApiLimitsException(message);
      case 104:
        return VKApiNotFoundException(message);
      case 105:
        return VKApiSaveFileException(message);
      case 106:
        return VKApiActionFailedException(message);
      case 1900:
        return VKApiPrettyCardsCardNotFoundException(message);
      case 1901:
        return VKApiPrettyCardsTooManyCardsException(message);
      case 1902:
        return VKApiPrettyCardsCardIsConnectedToPostException(message);
      case 113:
        return VKApiParamUserIdException(message);
      case 114:
        return VKApiParamAlbumIdException(message);
      case 629:
        return VKApiAdsObjectDeletedException(message);
      case 118:
        return VKApiParamServerException(message);
      case 119:
        return VKApiParamTitleException(message);
      case 1400:
        return VKApiMarketRestoreTooLateException(message);
      case 1401:
        return VKApiMarketCommentsClosedException(message);
      case 121:
        return VKApiParamHashException(message);
      case 1402:
        return VKApiMarketAlbumNotFoundException(message);
      case 122:
        return VKApiParamPhotosException(message);
      case 1403:
        return VKApiMarketItemNotFoundException(message);
      case 1404:
        return VKApiMarketItemAlreadyAddedException(message);
      case 125:
        return VKApiParamGroupIdException(message);
      case 1405:
        return VKApiMarketTooManyItemsException(message);
      case 1150:
        return VKApiParamDocIdException(message);
      case 1406:
        return VKApiMarketTooManyItemsInAlbumException(message);
      case 1151:
        return VKApiParamDocDeleteAccessException(message);
      case 1407:
        return VKApiMarketTooManyAlbumsException(message);
      case 1152:
        return VKApiParamDocTitleException(message);
      case 1408:
        return VKApiMarketItemHasBadLinksException(message);
      case 1153:
        return VKApiParamDocAccessException(message);
      case 129:
        return VKApiParamPhotoException(message);
      case 900:
        return VKApiMessagesUserBlockedException(message);
      case 901:
        return VKApiMessagesDenySendException(message);
      case 902:
        return VKApiMessagesPrivacyException(message);
      case 1160:
        return VKApiPhotoChangedException(message);
      case 907:
        return VKApiMessagesTooOldPtsException(message);
      case 908:
        return VKApiMessagesTooNewPtsException(message);
      case 140:
        return VKApiParamPageIdException(message);
      case 909:
        return VKApiMessagesEditExpiredException(message);
      case 141:
        return VKApiAccessPageException(message);
      case 910:
        return VKApiMessagesTooBigException(message);
      case 911:
        return VKApiMessagesKeyboardInvalidException(message);
      case 912:
        return VKApiMessagesChatBotFeatureException(message);
      case 913:
        return VKApiMessagesTooLongForwardsException(message);
      case 914:
        return VKApiMessagesTooLongMessageException(message);
      case 1170:
        return VKApiTooManyListsException(message);
      case 146:
        return VKApiMobileNotActivatedException(message);
      case 147:
        return VKApiInsufficientFundsException(message);
      case 148:
        return VKApiAccessMenuException(message);
      case 917:
        return VKApiMessagesChatUserNoAccessException(message);
      case 150:
        return VKApiParamTimestampException(message);
      case 919:
        return VKApiMessagesCantSeeInviteLinkException(message);
      case 920:
        return VKApiMessagesEditKindDisallowedException(message);
      case 921:
        return VKApiMessagesCantFwdException(message);
      case 924:
        return VKApiMessagesCantDeleteForAllException(message);
      case 925:
        return VKApiMessagesChatNotAdminException(message);
      case 927:
        return VKApiMessagesChatNotExistException(message);
      case 931:
        return VKApiMessagesCantChangeInviteLinkException(message);
      case 932:
        return VKApiMessagesGroupPeerAccessException(message);
      case 935:
        return VKApiMessagesChatUserNotInChatException(message);
      case 936:
        return VKApiMessagesContactNotFoundException(message);
      case 171:
        return VKApiFriendsListIdException(message);
      case 939:
        return VKApiMessagesMessageRequestAlreadySentException(message);
      case 940:
        return VKApiMessagesTooManyPostsException(message);
      case 173:
        return VKApiFriendsListLimitException(message);
      case 174:
        return VKApiFriendsAddYourselfException(message);
      case 942:
        return VKApiMessagesCantPinOneTimeStoryException(message);
      case 175:
        return VKApiFriendsAddInEnemyException(message);
      case 176:
        return VKApiFriendsAddEnemyException(message);
      case 177:
        return VKApiFriendsAddNotFoundException(message);
      case 180:
        return VKApiParamNoteIdException(message);
      case 181:
        return VKApiAccessNoteException(message);
      case 182:
        return VKApiAccessNoteCommentException(message);
      case 183:
        return VKApiAccessCommentException(message);
      case 700:
        return VKApiGroupChangeCreatorException(message);
      case 701:
        return VKApiGroupNotInClubException(message);
      case 702:
        return VKApiGroupTooManyOfficersException(message);
      case 703:
        return VKApiGroupNeed2faException(message);
      case 704:
        return VKApiGroupHostNeed2faException(message);
      case 706:
        return VKApiGroupTooManyAddressesException(message);
      case 711:
        return VKApiGroupAppIsNotInstalledInCommunityException(message);
      case 200:
        return VKApiAccessAlbumException(message);
      case 201:
        return VKApiAccessAudioException(message);
      case 203:
        return VKApiAccessGroupException(message);
      case 204:
        return VKApiAccessVideoException(message);
      case 205:
        return VKApiAccessMarketException(message);
      case 2000:
        return VKApiCallbackApiServersLimitException(message);
      case 210:
        return VKApiWallAccessPostException(message);
      case 211:
        return VKApiWallAccessCommentException(message);
      case 212:
        return VKApiWallAccessRepliesException(message);
      case 213:
        return VKApiWallAccessAddReplyException(message);
      case 214:
        return VKApiWallAddPostException(message);
      case 219:
        return VKApiWallAdsPublishedException(message);
      case 220:
        return VKApiWallTooManyRecipientsException(message);
      case 221:
        return VKApiStatusNoAudioException(message);
      case 222:
        return VKApiWallLinksForbiddenException(message);
      case 223:
        return VKApiWallReplyOwnerFloodException(message);
      case 224:
        return VKApiWallAdsPostLimitReachedException(message);
      case 1251:
        return VKApiAppsAlreadyUnlockedException(message);
      case 1000:
        return VKApiParamPhoneException(message);
      case 1256:
        return VKApiAppsSubscriptionNotFoundException(message);
      case 1257:
        return VKApiAppsSubscriptionInvalidStatusException(message);
      case 1260:
        return VKApiInvalidAddressException(message);
      case 1004:
        return VKApiPhoneAlreadyUsedException(message);
      case 500:
        return VKApiVotesPermissionException(message);
      case 503:
        return VKApiVotesException(message);
      case 250:
        return VKApiPollsAccessException(message);
      case 251:
        return VKApiPollsPollIdException(message);
      case 252:
        return VKApiPollsAnswerIdException(message);
      case 253:
        return VKApiPollsAccessWithoutVoteException(message);
      default:
        return VKApiException(code, message);
    }
  }
}
